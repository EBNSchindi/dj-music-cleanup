name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_DEFAULT: "3.10"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
    
    - name: Run Black (formatting check)
      run: black --check src/ tests/ examples/
    
    - name: Run Ruff (linting)
      run: ruff check src/ tests/ examples/
    
    - name: Run MyPy (type checking)
      run: mypy src/music_cleanup
      continue-on-error: true  # Don't fail on type errors initially

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg  # For audio processing tests
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev,fingerprinting,advanced]
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src/music_cleanup --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev,fingerprinting,advanced]
    
    - name: Create test music files
      run: |
        mkdir -p test_music
        # Create fake audio files for testing
        echo "fake mp3 content" > test_music/test1.mp3
        echo "fake flac content" > test_music/test2.flac
        echo "fake wav content" > test_music/test3.wav
    
    - name: Run integration tests
      run: |
        pytest tests/ -m integration -v
    
    - name: Test CLI functionality
      run: |
        music-cleanup --help
        music-cleanup --version
    
    - name: Test basic workflow (dry run)
      run: |
        music-cleanup test_music output_test --dry-run

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev,fingerprinting,advanced]
        pip install memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python scripts/benchmark.py
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
    
    - name: Run Bandit (security linter)
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (dependency scanner)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, integration-tests]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload to PyPI Test
      if: github.event.release.prerelease
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    - name: Upload to PyPI
      if: '!github.event.release.prerelease'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: djmusiccleanup/dj-music-cleanup
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[docs]
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, integration-tests, security-scan]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
    
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.integration-tests.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1