[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dj-music-cleanup"
version = "2.0.1"
description = "Professional DJ music library cleanup and organization tool with streaming architecture and transactional safety"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DJ Music Cleanup Contributors", email = "dj-music-cleanup@example.com"}
]
maintainers = [
    {name = "DJ Music Cleanup Contributors", email = "dj-music-cleanup@example.com"}
]
keywords = [
    "music", "dj", "cleanup", "organization", "audio", "metadata", 
    "fingerprinting", "duplicates", "streaming", "atomic", "recovery"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: System :: Archiving",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "mutagen>=1.46.0",
    "musicbrainzngs>=0.7.1",
    "tqdm>=4.65.0",
    "unidecode>=1.3.6",
    "requests>=2.31.0",
    "typing-extensions>=4.7.0; python_version<'3.10'",
]

[project.optional-dependencies]
fingerprinting = [
    "pyacoustid>=1.2.2",
]
advanced = [
    "eyed3>=0.9.7",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/EBNSchindi/dj-music-cleanup"
Documentation = "https://github.com/EBNSchindi/dj-music-cleanup/docs"
Repository = "https://github.com/EBNSchindi/dj-music-cleanup"
"Bug Reports" = "https://github.com/EBNSchindi/dj-music-cleanup/issues"
Changelog = "https://github.com/EBNSchindi/dj-music-cleanup/blob/main/CHANGELOG.md"

[project.scripts]
music-cleanup = "music_cleanup.cli:main"
dj-cleanup = "music_cleanup.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
music_cleanup = ["py.typed"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D103"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mutagen.*",
    "musicbrainzngs.*",
    "pyacoustid.*",
    "eyed3.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/music_cleanup",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]